package mocks

import "github.com/t11e/go-groveclient"
import "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Get provides a mock function with given fields: uid, options
func (_m *Client) Get(uid string, options groveclient.GetOptions) (*groveclient.PostItem, error) {
	ret := _m.Called(uid, options)

	var r0 *groveclient.PostItem
	if rf, ok := ret.Get(0).(func(string, groveclient.GetOptions) *groveclient.PostItem); ok {
		r0 = rf(uid, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groveclient.PostItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, groveclient.GetOptions) error); ok {
		r1 = rf(uid, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMany provides a mock function with given fields: uids, options
func (_m *Client) GetMany(uids []string, options groveclient.GetManyOptions) (*groveclient.GetManyOutput, error) {
	ret := _m.Called(uids, options)

	var r0 *groveclient.GetManyOutput
	if rf, ok := ret.Get(0).(func([]string, groveclient.GetManyOptions) *groveclient.GetManyOutput); ok {
		r0 = rf(uids, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groveclient.GetManyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, groveclient.GetManyOptions) error); ok {
		r1 = rf(uids, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
